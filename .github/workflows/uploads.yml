name: Upload to Google Drive
on:
  workflow_dispatch:

jobs:
  upload-to-drive:
    runs-on: ubuntu-latest
    steps:
      - name: Get Latest Release
        id: latest_release
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name | sed 's/v//')
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Latest version: $LATEST_VERSION"

      - name: Download Release Assets
        run: |
          # Download with error checking
          for file in student.zip solution.zip; do
            echo "Downloading $file..."
            if curl -L -o "$file" "https://github.com/${{ github.repository }}/releases/download/v${{ steps.latest_release.outputs.version }}/$file"; then
              echo "$file downloaded successfully"
              if unzip -t "$file" > /dev/null; then
                echo "$file verified as valid zip"
              else
                echo "Error: $file is not a valid zip file"
                exit 1
              fi
            else
              echo "Error downloading $file"
              exit 1
            fi
          done

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: pip install google-auth google-api-python-client

      - name: Upload to Drive
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
          DRIVE_FOLDER_ID: ${{ secrets.DRIVE_FOLDER_ID }}
          VERSION: ${{ steps.latest_release.outputs.version }}
        run: |
          cat > upload.py << 'EOF'
          import os
          import zipfile
          from google.oauth2.credentials import Credentials
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload

          # Verify files exist and are valid
          for zip_file in ['student.zip', 'solution.zip']:
              if not os.path.exists(zip_file):
                  raise FileNotFoundError(f"{zip_file} not found")
              try:
                  with zipfile.ZipFile(zip_file, 'r') as zf:
                      zf.testzip()
              except zipfile.BadZipFile:
                  raise Exception(f"{zip_file} is not a valid zip file")

          creds = Credentials(
              None,
              refresh_token=os.environ['REFRESH_TOKEN'],
              token_uri="https://oauth2.googleapis.com/token",
              client_id=os.environ['CLIENT_ID'],
              client_secret=os.environ['CLIENT_SECRET']
          )

          service = build('drive', 'v3', credentials=creds)
          folder_name = f'VCS_V1.{os.environ["VERSION"]}'

          folder = service.files().create(
              body={
                  'name': folder_name,
                  'mimeType': 'application/vnd.google-apps.folder',
                  'parents': [os.environ['DRIVE_FOLDER_ID']]
              },
              fields='id'
          ).execute()

          for zip_file in ['student.zip', 'solution.zip']:
              subfolder_name = zip_file.replace('.zip', '')
              subfolder = service.files().create(
                  body={
                      'name': subfolder_name,
                      'mimeType': 'application/vnd.google-apps.folder',
                      'parents': [folder['id']]
                  },
                  fields='id'
              ).execute()

              with zipfile.ZipFile(zip_file, 'r') as zip_ref:
                  zip_ref.extractall(subfolder_name)

              for root, dirs, files in os.walk(subfolder_name):
                  for file in files:
                      file_path = os.path.join(root, file)
                      relative_path = os.path.relpath(file_path, subfolder_name)
          
                      media = MediaFileUpload(file_path, resumable=True)
                      service.files().create(
                          body={
                              'name': relative_path,
                              'parents': [subfolder['id']]
                          },
                          media_body=media,
                          fields='id'
                      ).execute()

              media = MediaFileUpload(zip_file, resumable=True)
              service.files().create(
                  body={
                      'name': zip_file,
                      'parents': [folder['id']]
                  },
                  media_body=media,
                  fields='id'
              ).execute()
          EOF

          python upload.py

      - name: Cleanup
        if: always()
        run: |
          rm -f student.zip solution.zip
          rm -rf student solution