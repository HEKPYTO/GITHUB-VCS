name: Upload to Google Drive

on:
  workflow_dispatch:

jobs:
  upload-to-drive:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: pip install google-auth google-api-python-client

      - name: Download Latest Release
        uses: robinraju/release-downloader@v1.9
        with:
          latest: true
          fileName: "*.zip"

      - name: Get Version
        id: version
        run: |
          VERSION=$(curl -sH "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | \
            jq -r .tag_name | sed 's/v//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Upload to Drive
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
          DRIVE_FOLDER_ID: ${{ secrets.DRIVE_FOLDER_ID }}
        run: |
          cat > upload.py << 'EOF'
          import os
          import zipfile
          from google.oauth2.credentials import Credentials
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload

          # Authenticate with Google Drive
          creds = Credentials(
              None,
              refresh_token=os.environ['REFRESH_TOKEN'],
              token_uri="https://oauth2.googleapis.com/token",
              client_id=os.environ['CLIENT_ID'],
              client_secret=os.environ['CLIENT_SECRET']
          )
          service = build('drive', 'v3', credentials=creds)

          # Create main folder in Google Drive
          folder_name = f'VCS_V1.{os.environ["VERSION"]}'
          print(f"Creating folder: {folder_name}")
          folder = service.files().create(
              body={'name': folder_name, 'mimeType': 'application/vnd.google-apps.folder',
                    'parents': [os.environ['DRIVE_FOLDER_ID']]},
              fields='id'
          ).execute()

          # Process each zip file
          for zip_file in ['student.zip', 'solution.zip']:
              if not os.path.exists(zip_file):
                  print(f"Skipping {zip_file}, not found.")
                  continue

              subfolder_name = zip_file.replace('.zip', '')
              print(f"Creating subfolder: {subfolder_name}")
              subfolder = service.files().create(
                  body={'name': subfolder_name, 'mimeType': 'application/vnd.google-apps.folder',
                        'parents': [folder['id']]},
                  fields='id'
              ).execute()

              # Extract zip file to subfolder
              print(f"Extracting {zip_file}")
              os.makedirs(subfolder_name, exist_ok=True)
              with zipfile.ZipFile(zip_file, 'r') as zip_ref:
                  zip_ref.extractall(subfolder_name)

              # Function to upload directory structure recursively
              def upload_directory(local_path, parent_id):
                  for root, dirs, files in os.walk(local_path):
                      for dir_name in dirs:
                          dir_path = os.path.join(root, dir_name)
                          relative_path = os.path.relpath(dir_path, local_path)
                          print(f"Creating subfolder: {relative_path}")

                          # Create folder in Drive
                          drive_folder = service.files().create(
                              body={'name': relative_path, 'mimeType': 'application/vnd.google-apps.folder',
                                    'parents': [parent_id]},
                              fields='id'
                          ).execute()
                          upload_directory(dir_path, drive_folder['id'])  # Recurse into subfolder

                      for file in files:
                          file_path = os.path.join(root, file)
                          relative_path = os.path.relpath(file_path, local_path)
                          print(f"Uploading file: {relative_path}")

                          media = MediaFileUpload(file_path, resumable=True)
                          service.files().create(
                              body={'name': relative_path, 'parents': [parent_id]},
                              media_body=media,
                              fields='id'
                          ).execute()

              # Upload extracted contents while preserving structure
              upload_directory(subfolder_name, subfolder['id'])

              # Upload original zip file to main folder
              print(f"Uploading {zip_file} to main folder")
              media = MediaFileUpload(zip_file, resumable=True)
              service.files().create(
                  body={'name': zip_file, 'parents': [folder['id']]},
                  media_body=media,
                  fields='id'
              ).execute()

          print("Upload completed successfully.")
          EOF

          python upload.py

      - name: Cleanup
        if: always()
        run: |
          rm -f student.zip solution.zip
          rm -rf student solution