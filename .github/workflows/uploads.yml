name: Upload to Google Drive

on:
  workflow_dispatch:

jobs:
  upload-to-drive:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: pip install google-auth google-api-python-client

      - name: Download Latest Release
        uses: robinraju/release-downloader@v1.9
        with:
          latest: true
          fileName: "*.zip"

      - name: Get Version
        id: version
        run: |
          VERSION=$(curl -sH "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | \
            jq -r .tag_name | sed 's/v//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Upload to Drive
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
          DRIVE_FOLDER_ID: ${{ secrets.DRIVE_FOLDER_ID }}
        run: |
          cat > upload.py << 'EOF'
          import os
          import zipfile
          from google.oauth2.credentials import Credentials
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload

          def create_folder(service, folder_name, parent_folder_id, folder_cache):
              """Create a folder in Google Drive, ensuring it does not already exist."""
              if (parent_folder_id, folder_name) in folder_cache:
                  return folder_cache[(parent_folder_id, folder_name)]

              query = f"name='{folder_name}' and '{parent_folder_id}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false"
              results = service.files().list(q=query, fields="files(id)").execute()
              folders = results.get("files", [])

              if folders:
                  folder_id = folders[0]["id"]
              else:
                  folder_metadata = {
                      "name": folder_name,
                      "mimeType": "application/vnd.google-apps.folder",
                      "parents": [parent_folder_id]
                  }
                  folder = service.files().create(body=folder_metadata, fields="id").execute()
                  folder_id = folder["id"]

              folder_cache[(parent_folder_id, folder_name)] = folder_id
              return folder_id

          def upload_file(service, file_path, drive_folder_id):
              """Upload a file to Google Drive inside the specified folder."""
              media = MediaFileUpload(file_path, resumable=True)
              service.files().create(
                  body={"name": os.path.basename(file_path), "parents": [drive_folder_id]},
                  media_body=media,
                  fields="id"
              ).execute()

          creds = Credentials(
              None,
              refresh_token=os.environ['REFRESH_TOKEN'],
              token_uri="https://oauth2.googleapis.com/token",
              client_id=os.environ['CLIENT_ID'],
              client_secret=os.environ['CLIENT_SECRET']
          )

          service = build('drive', 'v3', credentials=creds)
          folder_cache = {}

          # Use only the version without timestamp
          root_folder_name = f'VCS_V1.{os.environ["VERSION"]}'
          root_folder_id = create_folder(service, root_folder_name, os.environ['DRIVE_FOLDER_ID'], folder_cache)

          for zip_file in ['student.zip', 'solution.zip']:
              subfolder_name = zip_file.replace('.zip', '')
              subfolder_id = create_folder(service, subfolder_name, root_folder_id, folder_cache)

              print(f"Extracting {zip_file}...")
              with zipfile.ZipFile(zip_file, 'r') as zip_ref:
                  zip_ref.extractall(subfolder_name)

              print(f"Uploading extracted files from {subfolder_name}...")
              for root, dirs, files in os.walk(subfolder_name):
                  relative_path = os.path.relpath(root, subfolder_name)
                  parent_id = subfolder_id

                  if relative_path != ".":
                      # Create nested folders dynamically
                      folders = relative_path.split(os.sep)
                      for folder in folders:
                          parent_id = create_folder(service, folder, parent_id, folder_cache)

                  for file in files:
                      file_path = os.path.join(root, file)
                      upload_file(service, file_path, parent_id)

              print(f"Uploading {zip_file} to main folder...")
              upload_file(service, zip_file, root_folder_id)

          print("Upload completed successfully")
          EOF

          python upload.py

      - name: Cleanup
        if: always()
        run: |
          rm -f student.zip solution.zip
          rm -rf student solution